#include "iomanager.h"#include "log.h"namespace libcocao {static libcocao::Logger::ptr g_logger = LIBCOCAO_LOG_NAME("system");IOManager::FdContext::EventContext &IOManager::FdContext::getEventContext(Event event) {    switch (event) {        case IOManager::READ:            return read;        case IOManager::WRITE:            return write;        default:            LIBCOCAO_LOG_ERROR(g_logger) << "getContext false";    }}void IOManager::FdContext::resetEventContext(EventContext &ctx) {    ctx.scheduler = nullptr;    ctx.fiber.reset();    ctx.cb = nullptr;}void IOManager::FdContext::triggerEvent(Event event) {    events = (Event)(events & ~event);    EventContext& ctx = getEventContext(event);    if (ctx.cb) {        ctx.scheduler->schedule(&ctx.cb);    } else {        ctx.scheduler->schedule(&ctx.fiber);    }    ctx.scheduler = nullptr;    return;}IOManager::IOManager(size_t threads, bool use_caller, const std::string &name)    : Scheduler(threads, use_caller, name){}}