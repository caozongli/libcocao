#include "http_parser.h"#include "../log.h"namespace libcocao {namespace http {static libcocao::Logger::ptr g_logger = LIBCOCAO_LOG_NAME("http");uint64_t g_http_request_buffer_size = (uint64_t)(4 * 1024 * 1024);uint64_t g_http_request_max_body_size= (uint64_t)(64 * 1024 * 1024);uint64_t g_http_response_buffer_size = (uint64_t)(4 * 1024 * 1024);uint64_t g_http_response_max_body_size = (uint64_t)(64 * 1024 * 1024);static uint64_t s_http_request_buffer_size = 0;static uint64_t s_http_request_max_body_size = 0;static uint64_t s_http_response_buffer_size = 0static uint64_t s_http_response_max_body_size = 0;/*** 构造函数*/HttpRequestParser::HttpRequestParser(){}/** * 解析协议 * @param data 协议文本内存 * @param len 协议文本内存长度 * @return 返回实际解析的长度，并且将已解析的数据移除 */size_t HttpRequestParser::exectue (char *data, size_t len){}/** * 返回HttpRequest协议解析的缓存大小 * @return */uint64_t HttpRequestParser::GetHttpRequestBufferSize(){    return s_http_request_buffer_size;}/** * 返回HttpRequest协议的最大消息体大小 * @return */uint64_t HttpRequestParser::GetHttpRequestMaxBodySize(){    return s_http_request_max_body_size;}}}