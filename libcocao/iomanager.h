#ifndef __LIBCOCAO_IOMANAGER_H__#define __LIBCOCAO_IOMANAGER_H__#include "schedule.h"namespace libcocao{class IOManager: Scheduler {public:    typedef std::shared_ptr<IOManager> ptr;    typedef Mutex MetexType;    typedef RWMutex RWMutexType;    enum Event {        NONE=0x0,        READ=0x1,        WRITE=0x2    };public:    struct FdContext {        typedef Mutex MutexType;        struct EventContext {            Scheduler *scheduler = nullptr;            Fiber::ptr fiber;            std::function<void()> cb;        };        EventContext &getEventContext(Event event);        void resetEventContext (EventContext &ctx);        void triggerEvent(Event event);        EventContext read;        EventContext write;        int fd = 0;        Event events = NONE;        MutexType mutex;    };public:    IOManager(size_t threads=-1, bool use_caller=true, const std::string &name="");private:    int m_epfd = 0;    int m_tickleFds[2];    std::atomic<size_t> m_pendingEventCount = {0};    RWMutexType m_mutex;    std::vector<FdContext*> m_fdContexts;};}#endif