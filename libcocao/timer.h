#ifndef __LIBCOCAO_TIMER_H__#define __LIBCOCAO_TIMER_H__#include <iostream>#include <functional>#include <memory>namespace libcocao {class TimerManager;class Timer: public std::enable_shared_from_this<Timer> {friend class TimerManager;public:    typedef std::shared_ptr<Timer> ptr;    bool cancel();    bool refresh();    bool reset();    Timer(uint64_t ms, std::function<void()> cb, bool recurring, TimerManager* manager);    Timer(uint64_t);private:    bool m_recurring = false;    uint64_t m_ms = 0;    uint64_t m_next = 0;    std::function<void()> m_cb;    TimerManager* m_manager = nullptr;private:    struct Comparator {        bool operator() (const Timer::ptr& lhs, const Timer::ptr& rhs) const;    };};}#endif